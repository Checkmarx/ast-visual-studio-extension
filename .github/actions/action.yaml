name: 'Set VSIX Version'
description: 'Increments the VSIX build version or sets it to a specified version.'
branding:
  icon: copy
  color: purple
inputs:
  version-type:
    description: 'Version type - build or revision'
    required: true
    default: 'build'
  manifest-file:
    description: 'Path to VSIX manifest'
    required: true
  build-number:
    description: 'Build number to use'
    required: true
    default: ${{ github.run_number }}
  vsix-token-source-file:
    description: 'Path to source.extension.vs'
    required: false
    default: ''
  version-number:
    description: If provided, will be used directly as the version of the VSIX, and no incrementing will happen.
    required: false
    default: ''
outputs:
  version-number:
    description: 'The resulting version number'
    value: ${{ steps.version_increment.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Set VSIX version
      id: version_increment
      shell: pwsh
      env:
        # Intermediary environment variable needed for security, see:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        VERSION_NUMBER: ${{ inputs.version-number }}
      run: |
        [xml]$vsixXml = Get-Content ${{ inputs.manifest-file }}

        $ns = New-Object System.Xml.XmlNamespaceManager $vsixXml.NameTable
        $ns.AddNamespace("ns", $vsixXml.DocumentElement.NamespaceURI) | Out-Null

        $attrVersion = ""

        if ($vsixXml.SelectSingleNode("//ns:Identity", $ns)){ # VS2012 format
            $attrVersion = $vsixXml.SelectSingleNode("//ns:Identity", $ns).Attributes["Version"]
        }
        elseif ($vsixXml.SelectSingleNode("//ns:Version", $ns)){ # VS2010 format
            $attrVersion = $vsixXml.SelectSingleNode("//ns:Version", $ns)
        }

        if ([string]::IsNullOrEmpty($Env:VERSION_NUMBER)){
            [Version]$version = $attrVersion.Value

            if (!$attrVersion.Value){
                $version = $attrVersion.InnerText
            }

            if ("${{ inputs.version-type }}" -eq "build"){
                $version = New-Object Version ([int]$version.Major),([int]$version.Minor),${{ inputs.build-number }}
            }
            elseif ("${{ inputs.version-type }}" -eq "revision"){
                $version = New-Object Version ([int]$version.Major),([int]$version.Minor),([System.Math]::Max([int]$version.Build, 0)),${{ inputs.build-number }}
            }
        }
        else{
            [Version]$version = New-Object Version $Env:VERSION_NUMBER
        }

        $attrVersion.InnerText = $version

        $vsixXml.Save("${{ inputs.manifest-file }}") | Out-Null

        "version=$version" >> $Env:GITHUB_OUTPUT
    - name: VSIX token replacement
      if: inputs.vsix-token-source-file != '' && inputs.vsix-token-source-file != null
      shell: pwsh
      run: |
        $filePath = "${{ inputs.vsix-token-source-file }}"
        $replacement = 'Version = "${{ steps.version_increment.outputs.version }}"'
        $content = [string]::join([environment]::newline, (get-content $filePath))
        $regex = New-Object System.Text.RegularExpressions.Regex 'Version = "([0-9\\.]+)"'
        $regex.Replace($content, $replacement) | Out-File $FilePath
