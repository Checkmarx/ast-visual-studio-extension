name: Checkmarx One visual studio extension CI

on: [ pull_request, workflow_dispatch ]

permissions: write-all

jobs:
  integration-tests:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Install Visual Studio Workloads
        run: |
          choco install visualstudio2022buildtools -y
          choco install visualstudio2022-workload-vctools -y

      - name: Add CodeCoverage to PATH
        shell: pwsh
        run: |
          $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $codeCoveragePath = Join-Path $vsPath "Team Tools\Dynamic Code Coverage Tools"
          if (-Not (Test-Path $codeCoveragePath)) {
            throw "Code Coverage Tools path not found: $codeCoveragePath"
          }
          echo "$codeCoveragePath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify CodeCoverage.exe
        shell: pwsh
        run: |
          if (-Not (Get-Command "CodeCoverage.exe" -ErrorAction SilentlyContinue)) {
            throw "CodeCoverage.exe not found in PATH"
          } else {
            Write-Host "CodeCoverage.exe is available"
          }

      - name: Restore NuGet packages
        run: nuget restore .

      - name: Restore
        run: dotnet restore .

      - name: Build
        run: msbuild /p:Configuration=Release /p:DeployExtension=False

      - name: Run Tests with Coverage
        shell: pwsh
        run: |
          $testDll = ".\ast-visual-studio-extension-tests\bin\Release\net60-windows\ast-visual-studio-extension-tests.dll"
          vstest.console.exe /EnableCodeCoverage $testDll

      - name: Generate Coverage Report
        shell: pwsh
        run: |
          $coverageFile = Get-ChildItem -Path . -Filter *.coverage -Recurse | Select-Object -First 1
          if (-Not $coverageFile) {
            throw "Coverage file not found."
          }
          CodeCoverage.exe analyze /output:coverage.xml $coverageFile.FullName

      - name: Print Coverage Summary
        shell: pwsh
        run: |
          if (-Not (Test-Path "coverage.xml")) {
            throw "Coverage XML file not found."
          }
          $xml = [xml](Get-Content coverage.xml)
          $totalLines = [int]$xml.CoverageSession.Summary.NumLines
          $coveredLines = [int]$xml.CoverageSession.Summary.NumCoveredLines
          $percentage = [math]::Round(($coveredLines / $totalLines) * 100, 2)
          Write-Host "Coverage Summary:"
          Write-Host "Total Lines: $totalLines"
          Write-Host "Covered Lines: $coveredLines"
          Write-Host "Coverage Percentage: $percentage%"
